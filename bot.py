import json
import logging
from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Plivo (–∞–Ω–∞–ª–æ–≥ Twilio)
PLIVO_AUTH_ID = "your_auth_id"
PLIVO_AUTH_TOKEN = "your_auth_token"
PLIVO_PHONE_NUMBER = "+12345678900"
GATE_PHONE_NUMBER = "+79876543210"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ASK_PHONE, MAIN_MENU = range(2)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try:
    with open("users.json", "r", encoding='utf-8') as f:
        USERS = json.load(f)
except FileNotFoundError:
    logger.error("–§–∞–π–ª users.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    USERS = {}
except json.JSONDecodeError:
    logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json")
    USERS = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CHAT_LINK = "https://t.me/+your_chat_link_here"
PAYMENT_LINK = "https://your-payment-link"
REKVIZITY = "–†–µ–∫–≤–∏–∑–∏—Ç—ã –°–ù–¢ ¬´–ü–æ–±–µ–¥–∞¬ª:\n–ò–ù–ù: –•–•–•–•–•–•\n–ë–ò–ö: –•–•–•–•–•–•\n..."

# –§—É–Ω–∫—Ü–∏—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Plivo
def call_gate_via_plivo():
    try:
        import plivo
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Plivo
        client = plivo.RestClient(PLIVO_AUTH_ID, PLIVO_AUTH_TOKEN)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤–æ–Ω–∫–∞
        call_params = {
            'from': PLIVO_PHONE_NUMBER,
            'to': GATE_PHONE_NUMBER,
            'answer_url': "https://s3.amazonaws.com/static.plivo.com/answer.xml",  # XML —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            'answer_method': "GET"
        }
        
        # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–≤–æ–Ω–æ–∫
        response = client.calls.create(**call_params)
        
        logger.info(f"Call initiated: RequestUUID={response.request_uuid}")
        return True
    except Exception as e:
        logger.error(f"Plivo call failed: {e}")
        return False

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ Telnyx (–¥—Ä—É–≥–æ–π –∞–Ω–∞–ª–æ–≥ Twilio)
def call_gate_via_telnyx():
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telnyx
    –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telnyx –≤–º–µ—Å—Ç–æ Plivo
    """
    try:
        from telnyx import Telnyx
        telnyx = Telnyx(api_key="your_telnyx_api_key")
        
        call = telnyx.Call.create(
            from_=PLIVO_PHONE_NUMBER,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –Ω–æ–º–µ—Ä–∞
            to=GATE_PHONE_NUMBER,
            connection_id="your_telnyx_connection_id"  # ID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        )
        
        logger.info(f"Call initiated: CallID={call.id}")
        return True
    except Exception as e:
        logger.error(f"Telnyx call failed: {e}")
        return False

async def fake_call_gate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞ –Ω–∞ –≤–æ—Ä–æ—Ç–∞"""
    await update.message.reply_text("üìû –ó–≤–æ–Ω—é –Ω–∞ –≤–æ—Ä–æ—Ç–∞...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Plivo (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ call_gate_via_telnyx())
    success = call_gate_via_plivo()
    
    if success:
        await update.message.reply_text("‚úÖ –í–æ—Ä–æ—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è. –ó–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    contact_button = KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=reply_markup
    )
    return ASK_PHONE

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    contact = update.message.contact
    if not contact:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        return ASK_PHONE
    
    phone = contact.phone_number

    if not phone.startswith("+"):
        phone = "+" + phone  # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º

    if phone in USERS:
        USERS[phone]["telegram_id"] = update.effective_user.id
        context.user_data["phone"] = phone
        await update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {USERS[phone]['name']}!",
            reply_markup=ReplyKeyboardRemove()
        )
        return await show_main_menu(update, context)
    else:
        await update.message.reply_text(
            "–í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –°–ù–¢. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    menu = [
        ["üí∞ –í–∑–Ω–æ—Å—ã", "üì∞ –ù–æ–≤–æ—Å—Ç–∏"],
        ["üí¨ –ß–∞—Ç", "üö™ –û—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞"],
        ["‚ö†Ô∏è –î–æ–ª–∂–Ω–∏–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    return MAIN_MENU

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é"""
    text = update.message.text

    if text == "üí∞ –í–∑–Ω–æ—Å—ã":
        msg = (f"üí∞ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∑–Ω–æ—Å–∞—Ö 2025 –≥–æ–¥–∞:*\n"
               f"- –ß–ª–µ–Ω—Å–∫–∏–π: 5000‚ÇΩ\n"
               f"- –¶–µ–ª–µ–≤–æ–π: 3000‚ÇΩ\n\n"
               f"{REKVIZITY}\n\n"
               f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ]({PAYMENT_LINK})")
        await update.message.reply_markdown(msg)
    
    elif text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏":
        try:
            with open("data/news.txt", "r", encoding="utf-8") as f:
                news = f.read()
            await update.message.reply_text(f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –°–ù–¢:\n\n{news}")
        except FileNotFoundError:
            await update.message.reply_text("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    
    elif text == "üí¨ –ß–∞—Ç":
        await update.message.reply_text(f"üí¨ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç –°–ù–¢: {CHAT_LINK}")
    
    elif text == "üö™ –û—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞":
        await fake_call_gate(update, context)
    
    elif text == "‚ö†Ô∏è –î–æ–ª–∂–Ω–∏–∫–∏":
        try:
            with open("data/debtors.txt", "r", encoding="utf-8") as f:
                debtors = f.read()
            await update.message.reply_text(f"‚ö†Ô∏è –î–æ–ª–∂–Ω–∏–∫–∏ –°–ù–¢:\n\n{debtors}")
        except FileNotFoundError:
            await update.message.reply_text("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–∂–Ω–∏–∫–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é.")
    
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–º–µ–Ω–∏—Ç–µ "YOUR_BOT_TOKEN" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    app = Application.builder().token("YOUR_BOT_TOKEN").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_PHONE: [MessageHandler(filters.CONTACT, ask_phone)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    logger.info("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
